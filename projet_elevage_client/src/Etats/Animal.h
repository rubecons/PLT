// Generated by dia2code
#ifndef ETATS__ANIMAL__H
#define ETATS__ANIMAL__H

#include <string>
#include <memory>
#include <array>
#include <vector>

namespace Etats {
  class Elevage;
  class Animal;
}

#include "Elevage.h"
#include "EtatAnimal.h"

namespace Etats {

  /// class Animal - 
  class Animal {
    // Associations
    Etats::EtatAnimal etat;
    // Attributes
  private:
    std::string IDanimal;
    std::shared_ptr<Elevage> IDelevage;
    //std::string nomAnimal;
    bool sexe;
    /// c'est la date de naissance, comme ca on calcule l'age, au lieu d'incrémenter à tous les coups l'âge
    std::array<int, 2> dateNaissance;
    std::vector<std::string> ancetres;
    //Elevage* elevageParent;
    // Operations
  public:
    Animal ();
    Animal (std::shared_ptr<Elevage> elvaj, bool sx, int ms, int an, std::vector<std::string> ancet);
    ~Animal ();
    void tuerAnimal ();
    void vendreAnimal ();
    std::string getIDAnimal ();
    EtatAnimal getEtat ();
    void setEtat (EtatAnimal state);
    std::shared_ptr<Elevage> getIDElevage ();
    void setIDElevage (std::shared_ptr<Elevage> id);
    //string getNomAnimal ();
    //void setNomAnimal (string nom);
    bool getSexe ();
    void setSexe (bool sxe);
    std::array<int, 2> getDateNaissance ();
    void setDateNaissance (int anneeNaissance, int moisNaissance);
    std::vector<std::string> getAncetres ();
    void setAncetres (std::shared_ptr<Animal> ancetresPere, std::shared_ptr<Animal> ancetresMere);
    //void accoupler ();
  };

};

#endif
