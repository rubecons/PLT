// Generated by dia2code
#ifndef ETATS__FERME__H
#define ETATS__FERME__H

#include <vector>
#include <memory>
#include <string>

namespace Etats {
  class Elevage;
  class Race;
  class Temps;
}

#include "Temps.h"
#include "Elevage.h"
#include "Race.h"

namespace Etats {

  /// class Ferme - 
  class Ferme {
    // Associations
    // Attributes
  public:
    int incrementNbElevage = 0;
  private:
    std::vector<int> utilisateurs;
    //std::vector<Elevage*> mesElevages;
    std::vector<std::shared_ptr<Elevage>> mesElevages;
    //std::vector<Race*> mesRaces;
    std::vector<std::shared_ptr<Race>> mesRaces;
    double budget = 0;
    double argentEmprunte = 0;
    std::shared_ptr<Temps> temps;
    // Operations
  public:
    Ferme ();
    Ferme (std::shared_ptr<Temps> tps);
    Ferme (double b, double em, std::shared_ptr<Temps> tps);
    ~Ferme ();
    void ajouterElevageListe (std::shared_ptr<Elevage> elevage);
    bool supprimerElevageListe (std::string IDElevage);//, int select);//, std::shared_ptr<Elevage> elevage);//);
    void ajouterRaceListe (std::shared_ptr<Race> race);
    bool supprimerRaceListe (int select);
    double getBudget ();
    void setBudget (double budgetInitial = 0);
    std::vector<std::shared_ptr<Elevage>> getElevages ();
    double getEmprunt ();
    std::vector<std::shared_ptr<Race>> getRaces ();
    std::shared_ptr<Temps> getTemps ();
    void setTemps (std::shared_ptr<Temps> tps);
    void emprunter (double sommeEmprunt);
    void remboursementEmprunt (double sommeRemboursee);
    double plusBudget (double argentAjoute);
    double moinsBudget (double argentDepense);
  };

};

#endif
